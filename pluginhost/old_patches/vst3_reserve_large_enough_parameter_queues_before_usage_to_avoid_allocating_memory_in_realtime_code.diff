diff --git a/pluginhost/JuceLibraryCode/modules/juce_audio_processors/format_types/juce_VST3PluginFormat.cpp b/pluginhost/JuceLibraryCode/modules/juce_audio_processors/format_types/juce_VST3PluginFormat.cpp
index 9161855f8..45cbd9b0d 100644
--- a/pluginhost/JuceLibraryCode/modules/juce_audio_processors/format_types/juce_VST3PluginFormat.cpp
+++ b/pluginhost/JuceLibraryCode/modules/juce_audio_processors/format_types/juce_VST3PluginFormat.cpp
@@ -1903,6 +1903,9 @@ public:
         if (getParameters().isEmpty() && editController->getParameterCount() > 0)
             configureParameters();
 
+        inputParameterChanges->reserve(editController->getParameterCount());
+        outputParameterChanges->reserve(editController->getParameterCount());
+
         return true;
     }
 
@@ -2471,12 +2474,19 @@ public:
     // DLL builds under MSVC.
     struct ParamValueQueueList  : public Vst::IParameterChanges
     {
-        ParamValueQueueList() {}
+        ParamValueQueueList() {
+        }
         virtual ~ParamValueQueueList() {}
 
         JUCE_DECLARE_VST3_COM_REF_METHODS
         JUCE_DECLARE_VST3_COM_QUERY_METHODS
 
+        void reserve(int n)
+        {
+            for (int i=0 ; queues.size() < n ; i++)
+                queues.add (new ParamValueQueue());
+        }
+      
         Steinberg::int32 PLUGIN_API getParameterCount() override
         {
             const ScopedLock sl (queuesLock);
@@ -2506,6 +2516,7 @@ public:
             }
 
             index = numQueuesUsed++;
+            //printf("\n\n\n===========================     INDEX: %d. size: %d\n\n\n", index, queues.size());
             auto* valueQueue = (index < queues.size() ? queues[index]
                                                       : queues.add (new ParamValueQueue()));
 
@@ -3238,6 +3249,7 @@ bool VST3PluginFormat::setStateFromVSTPresetFile (AudioPluginInstance* api, cons
 
 void VST3PluginFormat::findAllTypesForFile (OwnedArray<PluginDescription>& results, const String& fileOrIdentifier)
 {
+    //printf("VST3PluginFormat::findAllTypesForFile: \"%s\"\n", fileOrIdentifier.toRawUTF8());
     if (fileMightContainThisPluginType (fileOrIdentifier))
     {
         /**
