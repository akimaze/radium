diff --git a/pluginhost/JuceLibraryCode/modules/juce_core/native/juce_posix_SharedCode.h b/pluginhost/JuceLibraryCode/modules/juce_core/native/juce_posix_SharedCode.h
index 925c15709..787cf2c58 100644
--- a/pluginhost/JuceLibraryCode/modules/juce_core/native/juce_posix_SharedCode.h
+++ b/pluginhost/JuceLibraryCode/modules/juce_core/native/juce_posix_SharedCode.h
@@ -849,7 +849,7 @@ static void* threadEntryProc (void* userData)
     {
         juce_threadEntryPoint (myself);
     }
-
+    
    #if JUCE_ANDROID
     if (androidJNIJavaVM != nullptr)
     {
@@ -903,7 +903,6 @@ void Thread::launchThread()
         pthread_attr_setstacksize (attrPtr, threadStackSize);
     }
 
-
     if (pthread_create (&handle, attrPtr, threadEntryProc, this) == 0)
     {
         pthread_detach (handle);
diff --git a/pluginhost/JuceLibraryCode/modules/juce_core/threads/juce_Thread.cpp b/pluginhost/JuceLibraryCode/modules/juce_core/threads/juce_Thread.cpp
index c31f56cb5..740c9b683 100644
--- a/pluginhost/JuceLibraryCode/modules/juce_core/threads/juce_Thread.cpp
+++ b/pluginhost/JuceLibraryCode/modules/juce_core/threads/juce_Thread.cpp
@@ -84,22 +84,21 @@ void Thread::threadEntryPoint()
     if (threadName.isNotEmpty())
         setCurrentThreadName (threadName);
 
-    if (startSuspensionEvent.wait (10000))
-    {
-        jassert (getCurrentThreadId() == threadId.get());
-
-        if (affinityMask != 0)
-            setCurrentThreadAffinityMask (affinityMask);
-
-        try
-        {
-            run();
-        }
-        catch (...)
-        {
-            jassertfalse; // Your run() method mustn't throw any exceptions!
-        }
-    }
+    jassert (getCurrentThreadId() == threadId.get());
+
+    if (affinityMask != 0)
+      setCurrentThreadAffinityMask (affinityMask);
+
+    setCurrentThreadPriority (threadPriority);
+        
+    try
+      {
+        run();
+      }
+    catch (...)
+      {
+        jassertfalse; // Your run() method mustn't throw any exceptions!
+      }
 
     currentThreadHolder->value.releaseCurrentThreadStorage();
 
@@ -128,8 +127,6 @@ void Thread::startThread()
     if (threadHandle.get() == nullptr)
     {
         launchThread();
-        setThreadPriority (threadHandle.get(), threadPriority);
-        startSuspensionEvent.signal();
     }
 }
 
diff --git a/pluginhost/JuceLibraryCode/modules/juce_core/threads/juce_Thread.h b/pluginhost/JuceLibraryCode/modules/juce_core/threads/juce_Thread.h
index 07776ed6e..225fdff5f 100644
--- a/pluginhost/JuceLibraryCode/modules/juce_core/threads/juce_Thread.h
+++ b/pluginhost/JuceLibraryCode/modules/juce_core/threads/juce_Thread.h
@@ -386,7 +386,7 @@ private:
     Atomic<void*> threadHandle { nullptr };
     Atomic<ThreadID> threadId = {};
     CriticalSection startStopLock;
-    WaitableEvent startSuspensionEvent, defaultEvent;
+    WaitableEvent defaultEvent;
     int threadPriority = 5;
     size_t threadStackSize;
     uint32 affinityMask = 0;
