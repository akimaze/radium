diff --git a/pluginhost/JuceLibraryCode/modules/juce_audio_devices/native/juce_linux_Midi.cpp b/pluginhost/JuceLibraryCode/modules/juce_audio_devices/native/juce_linux_Midi.cpp
index 6fa0fbebe..337f92f63 100644
--- a/pluginhost/JuceLibraryCode/modules/juce_audio_devices/native/juce_linux_Midi.cpp
+++ b/pluginhost/JuceLibraryCode/modules/juce_audio_devices/native/juce_linux_Midi.cpp
@@ -24,6 +24,21 @@ namespace juce
 {
 
 #if JUCE_ALSA
+  
+static void setLowestRealtimePriority(void)
+{
+  struct sched_param param = {0};
+  param.sched_priority=sched_get_priority_min(SCHED_RR);
+  pthread_setschedparam(pthread_self(), SCHED_RR, &param);
+}
+
+static void setNonrealtimePriority(void)
+{
+  struct sched_param param = {0};
+  param.sched_priority=sched_get_priority_min(SCHED_OTHER);
+  pthread_setschedparam(pthread_self(), SCHED_OTHER, &param);
+}
+  
 
 //==============================================================================
 class AlsaClient  : public ReferenceCountedObject
@@ -190,6 +205,9 @@ public:
         {
             if (auto seqHandle = client.get())
             {
+              
+                enableSubscription = true; // Make sure all connections and ports are shown (for instance in the qjackctl patchbay). Not showing them only creates confusion.
+                
                 const unsigned int caps =
                     isInput ? (SND_SEQ_PORT_CAP_WRITE | (enableSubscription ? SND_SEQ_PORT_CAP_SUBS_WRITE : 0))
                             : (SND_SEQ_PORT_CAP_READ  | (enableSubscription ? SND_SEQ_PORT_CAP_SUBS_READ : 0));
@@ -313,6 +331,8 @@ private:
 
                 HeapBlock<uint8> buffer (maxEventSize);
 
+                setLowestRealtimePriority();
+            
                 while (! threadShouldExit())
                 {
                     if (poll (pfd, (nfds_t) numPfds, 100) > 0) // there was a "500" here which is a bit long when we exit the program and have to wait for a timeout on this poll call
@@ -343,6 +363,8 @@ private:
                     }
                 }
 
+                setNonrealtimePriority();
+                
                 snd_midi_event_free (midiParser);
             }
         }
@@ -388,10 +410,28 @@ static AlsaClient::Port* iterateMidiClient (const AlsaClient::Ptr& client,
             && (snd_seq_port_info_get_capability (portInfo)
                 & (forInput ? SND_SEQ_PORT_CAP_SUBS_READ : SND_SEQ_PORT_CAP_SUBS_WRITE)) != 0)
         {
-            String portName (snd_seq_port_info_get_name (portInfo));
+
+#if 1
+            const String clientName = snd_seq_client_info_get_name (clientInfo);
+            const String portName = snd_seq_port_info_get_name(portInfo);
             auto portID = snd_seq_port_info_get_port (portInfo);
+            
+            String deviceName;
+            
+            if (clientName == portName)
+              deviceName = clientName;
+            else
+              deviceName = clientName + ": " + portName;
 
+            MidiDeviceInfo device (deviceName, getFormattedPortIdentifier (sourceClient, portID));
+            
+#else       
+            String portName (snd_seq_port_info_get_name (portInfo));
+            auto portID = snd_seq_port_info_get_port (portInfo);
+            
             MidiDeviceInfo device (portName, getFormattedPortIdentifier (sourceClient, portID));
+#endif
+
             devices.add (device);
 
             if (deviceIdentifierToOpen.isNotEmpty() && deviceIdentifierToOpen == device.identifier)
@@ -523,7 +563,7 @@ StringArray MidiInput::getDevices()
     for (auto& d : getAvailableDevices())
         deviceNames.add (d.name);
 
-    deviceNames.appendNumbersToDuplicates (true, true);
+    deviceNames.appendNumbersToDuplicates (true, false);
 
     return deviceNames;
 }
@@ -620,7 +660,7 @@ StringArray MidiOutput::getDevices()
     for (auto& d : getAvailableDevices())
         deviceNames.add (d.name);
 
-    deviceNames.appendNumbersToDuplicates (true, true);
+    deviceNames.appendNumbersToDuplicates (true, false);
 
     return deviceNames;
 }
